#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mattenprüfprogramm
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BSL_Prüfmaschinen")]
	public partial class DatabaseConnectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertGrenzwert(Grenzwert instance);
    partial void UpdateGrenzwert(Grenzwert instance);
    partial void DeleteGrenzwert(Grenzwert instance);
    partial void InsertImport(Import instance);
    partial void UpdateImport(Import instance);
    partial void DeleteImport(Import instance);
    partial void InsertMatten(Matten instance);
    partial void UpdateMatten(Matten instance);
    partial void DeleteMatten(Matten instance);
    partial void InsertMattentypen(Mattentypen instance);
    partial void UpdateMattentypen(Mattentypen instance);
    partial void DeleteMattentypen(Mattentypen instance);
    partial void InsertNenngewichte(Nenngewichte instance);
    partial void UpdateNenngewichte(Nenngewichte instance);
    partial void DeleteNenngewichte(Nenngewichte instance);
    partial void InsertPrüfer(Prüfer instance);
    partial void UpdatePrüfer(Prüfer instance);
    partial void DeletePrüfer(Prüfer instance);
    partial void InsertRippenflächen(Rippenflächen instance);
    partial void UpdateRippenflächen(Rippenflächen instance);
    partial void DeleteRippenflächen(Rippenflächen instance);
    partial void InsertScherung(Scherung instance);
    partial void UpdateScherung(Scherung instance);
    partial void DeleteScherung(Scherung instance);
    partial void InsertSchweissmaschine(Schweissmaschine instance);
    partial void UpdateSchweissmaschine(Schweissmaschine instance);
    partial void DeleteSchweissmaschine(Schweissmaschine instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertZug(Zug instance);
    partial void UpdateZug(Zug instance);
    partial void DeleteZug(Zug instance);
    #endregion
		
		public DatabaseConnectionDataContext() : 
				base(global::Mattenprüfprogramm.Properties.Settings.Default.BSL_PrüfmaschinenConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Grenzwert> Grenzwert
		{
			get
			{
				return this.GetTable<Grenzwert>();
			}
		}
		
		public System.Data.Linq.Table<Import> Import
		{
			get
			{
				return this.GetTable<Import>();
			}
		}
		
		public System.Data.Linq.Table<Matten> Matten
		{
			get
			{
				return this.GetTable<Matten>();
			}
		}
		
		public System.Data.Linq.Table<Mattentypen> Mattentypen
		{
			get
			{
				return this.GetTable<Mattentypen>();
			}
		}
		
		public System.Data.Linq.Table<Nenngewichte> Nenngewichte
		{
			get
			{
				return this.GetTable<Nenngewichte>();
			}
		}
		
		public System.Data.Linq.Table<Prüfer> Prüfer
		{
			get
			{
				return this.GetTable<Prüfer>();
			}
		}
		
		public System.Data.Linq.Table<Rippenflächen> Rippenflächen
		{
			get
			{
				return this.GetTable<Rippenflächen>();
			}
		}
		
		public System.Data.Linq.Table<Scherung> Scherung
		{
			get
			{
				return this.GetTable<Scherung>();
			}
		}
		
		public System.Data.Linq.Table<Schweissmaschine> Schweissmaschine
		{
			get
			{
				return this.GetTable<Schweissmaschine>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Zug> Zug
		{
			get
			{
				return this.GetTable<Zug>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grenzwert")]
	public partial class Grenzwert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Feld;
		
		private System.Nullable<double> _Min;
		
		private System.Nullable<double> _Max;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFeldChanging(string value);
    partial void OnFeldChanged();
    partial void OnMinChanging(System.Nullable<double> value);
    partial void OnMinChanged();
    partial void OnMaxChanging(System.Nullable<double> value);
    partial void OnMaxChanged();
    #endregion
		
		public Grenzwert()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feld", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Feld
		{
			get
			{
				return this._Feld;
			}
			set
			{
				if ((this._Feld != value))
				{
					this.OnFeldChanging(value);
					this.SendPropertyChanging();
					this._Feld = value;
					this.SendPropertyChanged("Feld");
					this.OnFeldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Min", DbType="Float")]
		public System.Nullable<double> Min
		{
			get
			{
				return this._Min;
			}
			set
			{
				if ((this._Min != value))
				{
					this.OnMinChanging(value);
					this.SendPropertyChanging();
					this._Min = value;
					this.SendPropertyChanged("Min");
					this.OnMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max", DbType="Float")]
		public System.Nullable<double> Max
		{
			get
			{
				return this._Max;
			}
			set
			{
				if ((this._Max != value))
				{
					this.OnMaxChanging(value);
					this.SendPropertyChanging();
					this._Max = value;
					this.SendPropertyChanged("Max");
					this.OnMaxChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Import")]
	public partial class Import : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Import()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Matten")]
	public partial class Matten : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Datum;
		
		private int _Prüfnummer;
		
		private int _Id_Prüfer;
		
		private int _Id_Maschine;
		
		private int _Id_Mattentyp;
		
		private string _Kommentar;
		
		private System.Nullable<double> _Temperatur;
		
		private System.Nullable<bool> _Tiefgerippt;
		
		private System.Nullable<int> _Anzahl_l;
		
		private System.Nullable<int> _Anzahl_r;
		
		private System.Nullable<int> _Anzahl_q;
		
		private System.Nullable<int> _Fehlversuche_l;
		
		private System.Nullable<int> _Fehlversuche_r;
		
		private System.Nullable<int> _Fehlversuche_q;
		
		private EntitySet<Scherung> _Scherung;
		
		private EntitySet<Zug> _Zug;
		
		private EntityRef<Mattentypen> _Mattentypen;
		
		private EntityRef<Prüfer> _Prüfer;
		
		private EntityRef<Schweissmaschine> _Schweissmaschine;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDatumChanging(System.DateTime value);
    partial void OnDatumChanged();
    partial void OnPrüfnummerChanging(int value);
    partial void OnPrüfnummerChanged();
    partial void OnId_PrüferChanging(int value);
    partial void OnId_PrüferChanged();
    partial void OnId_MaschineChanging(int value);
    partial void OnId_MaschineChanged();
    partial void OnId_MattentypChanging(int value);
    partial void OnId_MattentypChanged();
    partial void OnKommentarChanging(string value);
    partial void OnKommentarChanged();
    partial void OnTemperaturChanging(System.Nullable<double> value);
    partial void OnTemperaturChanged();
    partial void OnTiefgeripptChanging(System.Nullable<bool> value);
    partial void OnTiefgeripptChanged();
    partial void OnAnzahl_lChanging(System.Nullable<int> value);
    partial void OnAnzahl_lChanged();
    partial void OnAnzahl_rChanging(System.Nullable<int> value);
    partial void OnAnzahl_rChanged();
    partial void OnAnzahl_qChanging(System.Nullable<int> value);
    partial void OnAnzahl_qChanged();
    partial void OnFehlversuche_lChanging(System.Nullable<int> value);
    partial void OnFehlversuche_lChanged();
    partial void OnFehlversuche_rChanging(System.Nullable<int> value);
    partial void OnFehlversuche_rChanged();
    partial void OnFehlversuche_qChanging(System.Nullable<int> value);
    partial void OnFehlversuche_qChanged();
    #endregion
		
		public Matten()
		{
			this._Scherung = new EntitySet<Scherung>(new Action<Scherung>(this.attach_Scherung), new Action<Scherung>(this.detach_Scherung));
			this._Zug = new EntitySet<Zug>(new Action<Zug>(this.attach_Zug), new Action<Zug>(this.detach_Zug));
			this._Mattentypen = default(EntityRef<Mattentypen>);
			this._Prüfer = default(EntityRef<Prüfer>);
			this._Schweissmaschine = default(EntityRef<Schweissmaschine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datum", DbType="DateTime NOT NULL")]
		public System.DateTime Datum
		{
			get
			{
				return this._Datum;
			}
			set
			{
				if ((this._Datum != value))
				{
					this.OnDatumChanging(value);
					this.SendPropertyChanging();
					this._Datum = value;
					this.SendPropertyChanged("Datum");
					this.OnDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prüfnummer", DbType="Int NOT NULL")]
		public int Prüfnummer
		{
			get
			{
				return this._Prüfnummer;
			}
			set
			{
				if ((this._Prüfnummer != value))
				{
					this.OnPrüfnummerChanging(value);
					this.SendPropertyChanging();
					this._Prüfnummer = value;
					this.SendPropertyChanged("Prüfnummer");
					this.OnPrüfnummerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Prüfer", DbType="Int NOT NULL")]
		public int Id_Prüfer
		{
			get
			{
				return this._Id_Prüfer;
			}
			set
			{
				if ((this._Id_Prüfer != value))
				{
					if (this._Prüfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_PrüferChanging(value);
					this.SendPropertyChanging();
					this._Id_Prüfer = value;
					this.SendPropertyChanged("Id_Prüfer");
					this.OnId_PrüferChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Maschine", DbType="Int NOT NULL")]
		public int Id_Maschine
		{
			get
			{
				return this._Id_Maschine;
			}
			set
			{
				if ((this._Id_Maschine != value))
				{
					if (this._Schweissmaschine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_MaschineChanging(value);
					this.SendPropertyChanging();
					this._Id_Maschine = value;
					this.SendPropertyChanged("Id_Maschine");
					this.OnId_MaschineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Mattentyp", DbType="Int NOT NULL")]
		public int Id_Mattentyp
		{
			get
			{
				return this._Id_Mattentyp;
			}
			set
			{
				if ((this._Id_Mattentyp != value))
				{
					if (this._Mattentypen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_MattentypChanging(value);
					this.SendPropertyChanging();
					this._Id_Mattentyp = value;
					this.SendPropertyChanged("Id_Mattentyp");
					this.OnId_MattentypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kommentar", DbType="VarChar(MAX)")]
		public string Kommentar
		{
			get
			{
				return this._Kommentar;
			}
			set
			{
				if ((this._Kommentar != value))
				{
					this.OnKommentarChanging(value);
					this.SendPropertyChanging();
					this._Kommentar = value;
					this.SendPropertyChanged("Kommentar");
					this.OnKommentarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperatur", DbType="Float")]
		public System.Nullable<double> Temperatur
		{
			get
			{
				return this._Temperatur;
			}
			set
			{
				if ((this._Temperatur != value))
				{
					this.OnTemperaturChanging(value);
					this.SendPropertyChanging();
					this._Temperatur = value;
					this.SendPropertyChanged("Temperatur");
					this.OnTemperaturChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tiefgerippt", DbType="Bit")]
		public System.Nullable<bool> Tiefgerippt
		{
			get
			{
				return this._Tiefgerippt;
			}
			set
			{
				if ((this._Tiefgerippt != value))
				{
					this.OnTiefgeripptChanging(value);
					this.SendPropertyChanging();
					this._Tiefgerippt = value;
					this.SendPropertyChanged("Tiefgerippt");
					this.OnTiefgeripptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anzahl_l", DbType="Int")]
		public System.Nullable<int> Anzahl_l
		{
			get
			{
				return this._Anzahl_l;
			}
			set
			{
				if ((this._Anzahl_l != value))
				{
					this.OnAnzahl_lChanging(value);
					this.SendPropertyChanging();
					this._Anzahl_l = value;
					this.SendPropertyChanged("Anzahl_l");
					this.OnAnzahl_lChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anzahl_r", DbType="Int")]
		public System.Nullable<int> Anzahl_r
		{
			get
			{
				return this._Anzahl_r;
			}
			set
			{
				if ((this._Anzahl_r != value))
				{
					this.OnAnzahl_rChanging(value);
					this.SendPropertyChanging();
					this._Anzahl_r = value;
					this.SendPropertyChanged("Anzahl_r");
					this.OnAnzahl_rChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anzahl_q", DbType="Int")]
		public System.Nullable<int> Anzahl_q
		{
			get
			{
				return this._Anzahl_q;
			}
			set
			{
				if ((this._Anzahl_q != value))
				{
					this.OnAnzahl_qChanging(value);
					this.SendPropertyChanging();
					this._Anzahl_q = value;
					this.SendPropertyChanged("Anzahl_q");
					this.OnAnzahl_qChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fehlversuche_l", DbType="Int")]
		public System.Nullable<int> Fehlversuche_l
		{
			get
			{
				return this._Fehlversuche_l;
			}
			set
			{
				if ((this._Fehlversuche_l != value))
				{
					this.OnFehlversuche_lChanging(value);
					this.SendPropertyChanging();
					this._Fehlversuche_l = value;
					this.SendPropertyChanged("Fehlversuche_l");
					this.OnFehlversuche_lChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fehlversuche_r", DbType="Int")]
		public System.Nullable<int> Fehlversuche_r
		{
			get
			{
				return this._Fehlversuche_r;
			}
			set
			{
				if ((this._Fehlversuche_r != value))
				{
					this.OnFehlversuche_rChanging(value);
					this.SendPropertyChanging();
					this._Fehlversuche_r = value;
					this.SendPropertyChanged("Fehlversuche_r");
					this.OnFehlversuche_rChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fehlversuche_q", DbType="Int")]
		public System.Nullable<int> Fehlversuche_q
		{
			get
			{
				return this._Fehlversuche_q;
			}
			set
			{
				if ((this._Fehlversuche_q != value))
				{
					this.OnFehlversuche_qChanging(value);
					this.SendPropertyChanging();
					this._Fehlversuche_q = value;
					this.SendPropertyChanged("Fehlversuche_q");
					this.OnFehlversuche_qChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matten_Scherung", Storage="_Scherung", ThisKey="Id", OtherKey="Id_Matten")]
		public EntitySet<Scherung> Scherung
		{
			get
			{
				return this._Scherung;
			}
			set
			{
				this._Scherung.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matten_Zug", Storage="_Zug", ThisKey="Id", OtherKey="Id_Matten")]
		public EntitySet<Zug> Zug
		{
			get
			{
				return this._Zug;
			}
			set
			{
				this._Zug.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mattentypen_Matten", Storage="_Mattentypen", ThisKey="Id_Mattentyp", OtherKey="Id", IsForeignKey=true)]
		public Mattentypen Mattentypen
		{
			get
			{
				return this._Mattentypen.Entity;
			}
			set
			{
				Mattentypen previousValue = this._Mattentypen.Entity;
				if (((previousValue != value) 
							|| (this._Mattentypen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mattentypen.Entity = null;
						previousValue.Matten.Remove(this);
					}
					this._Mattentypen.Entity = value;
					if ((value != null))
					{
						value.Matten.Add(this);
						this._Id_Mattentyp = value.Id;
					}
					else
					{
						this._Id_Mattentyp = default(int);
					}
					this.SendPropertyChanged("Mattentypen");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prüfer_Matten", Storage="_Prüfer", ThisKey="Id_Prüfer", OtherKey="Id", IsForeignKey=true)]
		public Prüfer Prüfer
		{
			get
			{
				return this._Prüfer.Entity;
			}
			set
			{
				Prüfer previousValue = this._Prüfer.Entity;
				if (((previousValue != value) 
							|| (this._Prüfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prüfer.Entity = null;
						previousValue.Matten.Remove(this);
					}
					this._Prüfer.Entity = value;
					if ((value != null))
					{
						value.Matten.Add(this);
						this._Id_Prüfer = value.Id;
					}
					else
					{
						this._Id_Prüfer = default(int);
					}
					this.SendPropertyChanged("Prüfer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schweissmaschine_Matten", Storage="_Schweissmaschine", ThisKey="Id_Maschine", OtherKey="Id", IsForeignKey=true)]
		public Schweissmaschine Schweissmaschine
		{
			get
			{
				return this._Schweissmaschine.Entity;
			}
			set
			{
				Schweissmaschine previousValue = this._Schweissmaschine.Entity;
				if (((previousValue != value) 
							|| (this._Schweissmaschine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schweissmaschine.Entity = null;
						previousValue.Matten.Remove(this);
					}
					this._Schweissmaschine.Entity = value;
					if ((value != null))
					{
						value.Matten.Add(this);
						this._Id_Maschine = value.Id;
					}
					else
					{
						this._Id_Maschine = default(int);
					}
					this.SendPropertyChanged("Schweissmaschine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scherung(Scherung entity)
		{
			this.SendPropertyChanging();
			entity.Matten = this;
		}
		
		private void detach_Scherung(Scherung entity)
		{
			this.SendPropertyChanging();
			entity.Matten = null;
		}
		
		private void attach_Zug(Zug entity)
		{
			this.SendPropertyChanging();
			entity.Matten = this;
		}
		
		private void detach_Zug(Zug entity)
		{
			this.SendPropertyChanging();
			entity.Matten = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mattentypen")]
	public partial class Mattentypen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Matten> _Matten;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Mattentypen()
		{
			this._Matten = new EntitySet<Matten>(new Action<Matten>(this.attach_Matten), new Action<Matten>(this.detach_Matten));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mattentypen_Matten", Storage="_Matten", ThisKey="Id", OtherKey="Id_Mattentyp")]
		public EntitySet<Matten> Matten
		{
			get
			{
				return this._Matten;
			}
			set
			{
				this._Matten.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matten(Matten entity)
		{
			this.SendPropertyChanging();
			entity.Mattentypen = this;
		}
		
		private void detach_Matten(Matten entity)
		{
			this.SendPropertyChanging();
			entity.Mattentypen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nenngewichte")]
	public partial class Nenngewichte : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private double _Durchmesser;
		
		private double _Nenngewicht;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDurchmesserChanging(double value);
    partial void OnDurchmesserChanged();
    partial void OnNenngewichtChanging(double value);
    partial void OnNenngewichtChanged();
    #endregion
		
		public Nenngewichte()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Durchmesser", DbType="Float NOT NULL")]
		public double Durchmesser
		{
			get
			{
				return this._Durchmesser;
			}
			set
			{
				if ((this._Durchmesser != value))
				{
					this.OnDurchmesserChanging(value);
					this.SendPropertyChanging();
					this._Durchmesser = value;
					this.SendPropertyChanged("Durchmesser");
					this.OnDurchmesserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nenngewicht", DbType="Float NOT NULL")]
		public double Nenngewicht
		{
			get
			{
				return this._Nenngewicht;
			}
			set
			{
				if ((this._Nenngewicht != value))
				{
					this.OnNenngewichtChanging(value);
					this.SendPropertyChanging();
					this._Nenngewicht = value;
					this.SendPropertyChanged("Nenngewicht");
					this.OnNenngewichtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prüfer")]
	public partial class Prüfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Matten> _Matten;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Prüfer()
		{
			this._Matten = new EntitySet<Matten>(new Action<Matten>(this.attach_Matten), new Action<Matten>(this.detach_Matten));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prüfer_Matten", Storage="_Matten", ThisKey="Id", OtherKey="Id_Prüfer")]
		public EntitySet<Matten> Matten
		{
			get
			{
				return this._Matten;
			}
			set
			{
				this._Matten.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matten(Matten entity)
		{
			this.SendPropertyChanging();
			entity.Prüfer = this;
		}
		
		private void detach_Matten(Matten entity)
		{
			this.SendPropertyChanging();
			entity.Prüfer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rippenflächen")]
	public partial class Rippenflächen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<double> _Nenndurchmesser;
		
		private System.Nullable<double> _Min;
		
		private System.Nullable<double> _Max;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNenndurchmesserChanging(System.Nullable<double> value);
    partial void OnNenndurchmesserChanged();
    partial void OnMinChanging(System.Nullable<double> value);
    partial void OnMinChanged();
    partial void OnMaxChanging(System.Nullable<double> value);
    partial void OnMaxChanged();
    #endregion
		
		public Rippenflächen()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nenndurchmesser", DbType="Float")]
		public System.Nullable<double> Nenndurchmesser
		{
			get
			{
				return this._Nenndurchmesser;
			}
			set
			{
				if ((this._Nenndurchmesser != value))
				{
					this.OnNenndurchmesserChanging(value);
					this.SendPropertyChanging();
					this._Nenndurchmesser = value;
					this.SendPropertyChanged("Nenndurchmesser");
					this.OnNenndurchmesserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Min", DbType="Float")]
		public System.Nullable<double> Min
		{
			get
			{
				return this._Min;
			}
			set
			{
				if ((this._Min != value))
				{
					this.OnMinChanging(value);
					this.SendPropertyChanging();
					this._Min = value;
					this.SendPropertyChanged("Min");
					this.OnMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max", DbType="Float")]
		public System.Nullable<double> Max
		{
			get
			{
				return this._Max;
			}
			set
			{
				if ((this._Max != value))
				{
					this.OnMaxChanging(value);
					this.SendPropertyChanging();
					this._Max = value;
					this.SendPropertyChanged("Max");
					this.OnMaxChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scherung")]
	public partial class Scherung : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Datum;
		
		private System.Nullable<int> _Maschine;
		
		private string _Mattentyp;
		
		private string _Prüfer;
		
		private System.Nullable<double> _Durchmesser;
		
		private string _Richtung;
		
		private System.Nullable<double> _Höchstkraft;
		
		private System.Nullable<double> _Scherwert;
		
		private System.Nullable<int> _Id_Matten;
		
		private EntityRef<Matten> _Matten;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDatumChanging(System.Nullable<System.DateTime> value);
    partial void OnDatumChanged();
    partial void OnMaschineChanging(System.Nullable<int> value);
    partial void OnMaschineChanged();
    partial void OnMattentypChanging(string value);
    partial void OnMattentypChanged();
    partial void OnPrüferChanging(string value);
    partial void OnPrüferChanged();
    partial void OnDurchmesserChanging(System.Nullable<double> value);
    partial void OnDurchmesserChanged();
    partial void OnRichtungChanging(string value);
    partial void OnRichtungChanged();
    partial void OnHöchstkraftChanging(System.Nullable<double> value);
    partial void OnHöchstkraftChanged();
    partial void OnScherwertChanging(System.Nullable<double> value);
    partial void OnScherwertChanged();
    partial void OnId_MattenChanging(System.Nullable<int> value);
    partial void OnId_MattenChanged();
    #endregion
		
		public Scherung()
		{
			this._Matten = default(EntityRef<Matten>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datum", DbType="DateTime")]
		public System.Nullable<System.DateTime> Datum
		{
			get
			{
				return this._Datum;
			}
			set
			{
				if ((this._Datum != value))
				{
					this.OnDatumChanging(value);
					this.SendPropertyChanging();
					this._Datum = value;
					this.SendPropertyChanged("Datum");
					this.OnDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maschine", DbType="Int")]
		public System.Nullable<int> Maschine
		{
			get
			{
				return this._Maschine;
			}
			set
			{
				if ((this._Maschine != value))
				{
					this.OnMaschineChanging(value);
					this.SendPropertyChanging();
					this._Maschine = value;
					this.SendPropertyChanged("Maschine");
					this.OnMaschineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mattentyp", DbType="VarChar(10)")]
		public string Mattentyp
		{
			get
			{
				return this._Mattentyp;
			}
			set
			{
				if ((this._Mattentyp != value))
				{
					this.OnMattentypChanging(value);
					this.SendPropertyChanging();
					this._Mattentyp = value;
					this.SendPropertyChanged("Mattentyp");
					this.OnMattentypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prüfer", DbType="VarChar(50)")]
		public string Prüfer
		{
			get
			{
				return this._Prüfer;
			}
			set
			{
				if ((this._Prüfer != value))
				{
					this.OnPrüferChanging(value);
					this.SendPropertyChanging();
					this._Prüfer = value;
					this.SendPropertyChanged("Prüfer");
					this.OnPrüferChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Durchmesser", DbType="Float")]
		public System.Nullable<double> Durchmesser
		{
			get
			{
				return this._Durchmesser;
			}
			set
			{
				if ((this._Durchmesser != value))
				{
					this.OnDurchmesserChanging(value);
					this.SendPropertyChanging();
					this._Durchmesser = value;
					this.SendPropertyChanged("Durchmesser");
					this.OnDurchmesserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Richtung", DbType="VarChar(5)")]
		public string Richtung
		{
			get
			{
				return this._Richtung;
			}
			set
			{
				if ((this._Richtung != value))
				{
					this.OnRichtungChanging(value);
					this.SendPropertyChanging();
					this._Richtung = value;
					this.SendPropertyChanged("Richtung");
					this.OnRichtungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Höchstkraft", DbType="Float")]
		public System.Nullable<double> Höchstkraft
		{
			get
			{
				return this._Höchstkraft;
			}
			set
			{
				if ((this._Höchstkraft != value))
				{
					this.OnHöchstkraftChanging(value);
					this.SendPropertyChanging();
					this._Höchstkraft = value;
					this.SendPropertyChanged("Höchstkraft");
					this.OnHöchstkraftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scherwert", DbType="Float")]
		public System.Nullable<double> Scherwert
		{
			get
			{
				return this._Scherwert;
			}
			set
			{
				if ((this._Scherwert != value))
				{
					this.OnScherwertChanging(value);
					this.SendPropertyChanging();
					this._Scherwert = value;
					this.SendPropertyChanged("Scherwert");
					this.OnScherwertChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Matten", DbType="Int")]
		public System.Nullable<int> Id_Matten
		{
			get
			{
				return this._Id_Matten;
			}
			set
			{
				if ((this._Id_Matten != value))
				{
					if (this._Matten.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_MattenChanging(value);
					this.SendPropertyChanging();
					this._Id_Matten = value;
					this.SendPropertyChanged("Id_Matten");
					this.OnId_MattenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matten_Scherung", Storage="_Matten", ThisKey="Id_Matten", OtherKey="Id", IsForeignKey=true)]
		public Matten Matten
		{
			get
			{
				return this._Matten.Entity;
			}
			set
			{
				Matten previousValue = this._Matten.Entity;
				if (((previousValue != value) 
							|| (this._Matten.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Matten.Entity = null;
						previousValue.Scherung.Remove(this);
					}
					this._Matten.Entity = value;
					if ((value != null))
					{
						value.Scherung.Add(this);
						this._Id_Matten = value.Id;
					}
					else
					{
						this._Id_Matten = default(Nullable<int>);
					}
					this.SendPropertyChanged("Matten");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schweissmaschine")]
	public partial class Schweissmaschine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Nummer;
		
		private EntitySet<Matten> _Matten;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNummerChanging(int value);
    partial void OnNummerChanged();
    #endregion
		
		public Schweissmaschine()
		{
			this._Matten = new EntitySet<Matten>(new Action<Matten>(this.attach_Matten), new Action<Matten>(this.detach_Matten));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nummer", DbType="Int NOT NULL")]
		public int Nummer
		{
			get
			{
				return this._Nummer;
			}
			set
			{
				if ((this._Nummer != value))
				{
					this.OnNummerChanging(value);
					this.SendPropertyChanging();
					this._Nummer = value;
					this.SendPropertyChanged("Nummer");
					this.OnNummerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schweissmaschine_Matten", Storage="_Matten", ThisKey="Id", OtherKey="Id_Maschine")]
		public EntitySet<Matten> Matten
		{
			get
			{
				return this._Matten;
			}
			set
			{
				this._Matten.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matten(Matten entity)
		{
			this.SendPropertyChanging();
			entity.Schweissmaschine = this;
		}
		
		private void detach_Matten(Matten entity)
		{
			this.SendPropertyChanging();
			entity.Schweissmaschine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Passwort;
		
		private bool _lesen;
		
		private bool _schreiben;
		
		private bool _admin;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswortChanging(string value);
    partial void OnPasswortChanged();
    partial void OnlesenChanging(bool value);
    partial void OnlesenChanged();
    partial void OnschreibenChanging(bool value);
    partial void OnschreibenChanged();
    partial void OnadminChanging(bool value);
    partial void OnadminChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passwort", DbType="VarChar(20)")]
		public string Passwort
		{
			get
			{
				return this._Passwort;
			}
			set
			{
				if ((this._Passwort != value))
				{
					this.OnPasswortChanging(value);
					this.SendPropertyChanging();
					this._Passwort = value;
					this.SendPropertyChanged("Passwort");
					this.OnPasswortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lesen", DbType="Bit NOT NULL")]
		public bool lesen
		{
			get
			{
				return this._lesen;
			}
			set
			{
				if ((this._lesen != value))
				{
					this.OnlesenChanging(value);
					this.SendPropertyChanging();
					this._lesen = value;
					this.SendPropertyChanged("lesen");
					this.OnlesenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_schreiben", DbType="Bit NOT NULL")]
		public bool schreiben
		{
			get
			{
				return this._schreiben;
			}
			set
			{
				if ((this._schreiben != value))
				{
					this.OnschreibenChanging(value);
					this.SendPropertyChanging();
					this._schreiben = value;
					this.SendPropertyChanged("schreiben");
					this.OnschreibenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admin", DbType="Bit NOT NULL")]
		public bool admin
		{
			get
			{
				return this._admin;
			}
			set
			{
				if ((this._admin != value))
				{
					this.OnadminChanging(value);
					this.SendPropertyChanging();
					this._admin = value;
					this.SendPropertyChanged("admin");
					this.OnadminChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Zug")]
	public partial class Zug : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Datum;
		
		private System.Nullable<int> _Maschine;
		
		private string _Mattentyp;
		
		private string _Prüfer;
		
		private System.Nullable<double> _Durchmesser;
		
		private System.Nullable<double> _Masse;
		
		private string _Richtung;
		
		private System.Nullable<double> _Zugfestigkeit;
		
		private System.Nullable<double> _Dehngrenze;
		
		private System.Nullable<double> _DehnungHöchstkraft;
		
		private System.Nullable<double> _Bruchdehnung;
		
		private System.Nullable<double> _Streckengrenzverhältnis;
		
		private System.Nullable<double> _AbweichungNenngewicht;
		
		private string _Bruchlage;
		
		private System.Nullable<int> _Id_Matten;
		
		private System.Nullable<double> _Se1;
		
		private System.Nullable<double> _Se2;
		
		private System.Nullable<double> _Se3;
		
		private System.Nullable<double> _H1m;
		
		private System.Nullable<double> _H2m;
		
		private System.Nullable<double> _H3m;
		
		private System.Nullable<double> _H125;
		
		private System.Nullable<double> _H225;
		
		private System.Nullable<double> _H325;
		
		private System.Nullable<double> _H175;
		
		private System.Nullable<double> _H275;
		
		private System.Nullable<double> _H375;
		
		private System.Nullable<double> _C;
		
		private System.Nullable<double> _Fr;
		
		private EntityRef<Matten> _Matten;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDatumChanging(System.Nullable<System.DateTime> value);
    partial void OnDatumChanged();
    partial void OnMaschineChanging(System.Nullable<int> value);
    partial void OnMaschineChanged();
    partial void OnMattentypChanging(string value);
    partial void OnMattentypChanged();
    partial void OnPrüferChanging(string value);
    partial void OnPrüferChanged();
    partial void OnDurchmesserChanging(System.Nullable<double> value);
    partial void OnDurchmesserChanged();
    partial void OnMasseChanging(System.Nullable<double> value);
    partial void OnMasseChanged();
    partial void OnRichtungChanging(string value);
    partial void OnRichtungChanged();
    partial void OnZugfestigkeitChanging(System.Nullable<double> value);
    partial void OnZugfestigkeitChanged();
    partial void OnDehngrenzeChanging(System.Nullable<double> value);
    partial void OnDehngrenzeChanged();
    partial void OnDehnungHöchstkraftChanging(System.Nullable<double> value);
    partial void OnDehnungHöchstkraftChanged();
    partial void OnBruchdehnungChanging(System.Nullable<double> value);
    partial void OnBruchdehnungChanged();
    partial void OnStreckengrenzverhältnisChanging(System.Nullable<double> value);
    partial void OnStreckengrenzverhältnisChanged();
    partial void OnAbweichungNenngewichtChanging(System.Nullable<double> value);
    partial void OnAbweichungNenngewichtChanged();
    partial void OnBruchlageChanging(string value);
    partial void OnBruchlageChanged();
    partial void OnId_MattenChanging(System.Nullable<int> value);
    partial void OnId_MattenChanged();
    partial void OnSe1Changing(System.Nullable<double> value);
    partial void OnSe1Changed();
    partial void OnSe2Changing(System.Nullable<double> value);
    partial void OnSe2Changed();
    partial void OnSe3Changing(System.Nullable<double> value);
    partial void OnSe3Changed();
    partial void OnH1mChanging(System.Nullable<double> value);
    partial void OnH1mChanged();
    partial void OnH2mChanging(System.Nullable<double> value);
    partial void OnH2mChanged();
    partial void OnH3mChanging(System.Nullable<double> value);
    partial void OnH3mChanged();
    partial void OnH125Changing(System.Nullable<double> value);
    partial void OnH125Changed();
    partial void OnH225Changing(System.Nullable<double> value);
    partial void OnH225Changed();
    partial void OnH325Changing(System.Nullable<double> value);
    partial void OnH325Changed();
    partial void OnH175Changing(System.Nullable<double> value);
    partial void OnH175Changed();
    partial void OnH275Changing(System.Nullable<double> value);
    partial void OnH275Changed();
    partial void OnH375Changing(System.Nullable<double> value);
    partial void OnH375Changed();
    partial void OnCChanging(System.Nullable<double> value);
    partial void OnCChanged();
    partial void OnFrChanging(System.Nullable<double> value);
    partial void OnFrChanged();
    #endregion
		
		public Zug()
		{
			this._Matten = default(EntityRef<Matten>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datum", DbType="DateTime")]
		public System.Nullable<System.DateTime> Datum
		{
			get
			{
				return this._Datum;
			}
			set
			{
				if ((this._Datum != value))
				{
					this.OnDatumChanging(value);
					this.SendPropertyChanging();
					this._Datum = value;
					this.SendPropertyChanged("Datum");
					this.OnDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maschine", DbType="Int")]
		public System.Nullable<int> Maschine
		{
			get
			{
				return this._Maschine;
			}
			set
			{
				if ((this._Maschine != value))
				{
					this.OnMaschineChanging(value);
					this.SendPropertyChanging();
					this._Maschine = value;
					this.SendPropertyChanged("Maschine");
					this.OnMaschineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mattentyp", DbType="VarChar(10)")]
		public string Mattentyp
		{
			get
			{
				return this._Mattentyp;
			}
			set
			{
				if ((this._Mattentyp != value))
				{
					this.OnMattentypChanging(value);
					this.SendPropertyChanging();
					this._Mattentyp = value;
					this.SendPropertyChanged("Mattentyp");
					this.OnMattentypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prüfer", DbType="VarChar(50)")]
		public string Prüfer
		{
			get
			{
				return this._Prüfer;
			}
			set
			{
				if ((this._Prüfer != value))
				{
					this.OnPrüferChanging(value);
					this.SendPropertyChanging();
					this._Prüfer = value;
					this.SendPropertyChanged("Prüfer");
					this.OnPrüferChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Durchmesser", DbType="Float")]
		public System.Nullable<double> Durchmesser
		{
			get
			{
				return this._Durchmesser;
			}
			set
			{
				if ((this._Durchmesser != value))
				{
					this.OnDurchmesserChanging(value);
					this.SendPropertyChanging();
					this._Durchmesser = value;
					this.SendPropertyChanged("Durchmesser");
					this.OnDurchmesserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Masse", DbType="Float")]
		public System.Nullable<double> Masse
		{
			get
			{
				return this._Masse;
			}
			set
			{
				if ((this._Masse != value))
				{
					this.OnMasseChanging(value);
					this.SendPropertyChanging();
					this._Masse = value;
					this.SendPropertyChanged("Masse");
					this.OnMasseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Richtung", DbType="VarChar(5)")]
		public string Richtung
		{
			get
			{
				return this._Richtung;
			}
			set
			{
				if ((this._Richtung != value))
				{
					this.OnRichtungChanging(value);
					this.SendPropertyChanging();
					this._Richtung = value;
					this.SendPropertyChanged("Richtung");
					this.OnRichtungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zugfestigkeit", DbType="Float")]
		public System.Nullable<double> Zugfestigkeit
		{
			get
			{
				return this._Zugfestigkeit;
			}
			set
			{
				if ((this._Zugfestigkeit != value))
				{
					this.OnZugfestigkeitChanging(value);
					this.SendPropertyChanging();
					this._Zugfestigkeit = value;
					this.SendPropertyChanged("Zugfestigkeit");
					this.OnZugfestigkeitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dehngrenze", DbType="Float")]
		public System.Nullable<double> Dehngrenze
		{
			get
			{
				return this._Dehngrenze;
			}
			set
			{
				if ((this._Dehngrenze != value))
				{
					this.OnDehngrenzeChanging(value);
					this.SendPropertyChanging();
					this._Dehngrenze = value;
					this.SendPropertyChanged("Dehngrenze");
					this.OnDehngrenzeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DehnungHöchstkraft", DbType="Float")]
		public System.Nullable<double> DehnungHöchstkraft
		{
			get
			{
				return this._DehnungHöchstkraft;
			}
			set
			{
				if ((this._DehnungHöchstkraft != value))
				{
					this.OnDehnungHöchstkraftChanging(value);
					this.SendPropertyChanging();
					this._DehnungHöchstkraft = value;
					this.SendPropertyChanged("DehnungHöchstkraft");
					this.OnDehnungHöchstkraftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bruchdehnung", DbType="Float")]
		public System.Nullable<double> Bruchdehnung
		{
			get
			{
				return this._Bruchdehnung;
			}
			set
			{
				if ((this._Bruchdehnung != value))
				{
					this.OnBruchdehnungChanging(value);
					this.SendPropertyChanging();
					this._Bruchdehnung = value;
					this.SendPropertyChanged("Bruchdehnung");
					this.OnBruchdehnungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Streckengrenzverhältnis", DbType="Float")]
		public System.Nullable<double> Streckengrenzverhältnis
		{
			get
			{
				return this._Streckengrenzverhältnis;
			}
			set
			{
				if ((this._Streckengrenzverhältnis != value))
				{
					this.OnStreckengrenzverhältnisChanging(value);
					this.SendPropertyChanging();
					this._Streckengrenzverhältnis = value;
					this.SendPropertyChanged("Streckengrenzverhältnis");
					this.OnStreckengrenzverhältnisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbweichungNenngewicht", DbType="Float")]
		public System.Nullable<double> AbweichungNenngewicht
		{
			get
			{
				return this._AbweichungNenngewicht;
			}
			set
			{
				if ((this._AbweichungNenngewicht != value))
				{
					this.OnAbweichungNenngewichtChanging(value);
					this.SendPropertyChanging();
					this._AbweichungNenngewicht = value;
					this.SendPropertyChanged("AbweichungNenngewicht");
					this.OnAbweichungNenngewichtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bruchlage", DbType="VarChar(5)")]
		public string Bruchlage
		{
			get
			{
				return this._Bruchlage;
			}
			set
			{
				if ((this._Bruchlage != value))
				{
					this.OnBruchlageChanging(value);
					this.SendPropertyChanging();
					this._Bruchlage = value;
					this.SendPropertyChanged("Bruchlage");
					this.OnBruchlageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Matten", DbType="Int")]
		public System.Nullable<int> Id_Matten
		{
			get
			{
				return this._Id_Matten;
			}
			set
			{
				if ((this._Id_Matten != value))
				{
					if (this._Matten.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_MattenChanging(value);
					this.SendPropertyChanging();
					this._Id_Matten = value;
					this.SendPropertyChanged("Id_Matten");
					this.OnId_MattenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Se1", DbType="Float")]
		public System.Nullable<double> Se1
		{
			get
			{
				return this._Se1;
			}
			set
			{
				if ((this._Se1 != value))
				{
					this.OnSe1Changing(value);
					this.SendPropertyChanging();
					this._Se1 = value;
					this.SendPropertyChanged("Se1");
					this.OnSe1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Se2", DbType="Float")]
		public System.Nullable<double> Se2
		{
			get
			{
				return this._Se2;
			}
			set
			{
				if ((this._Se2 != value))
				{
					this.OnSe2Changing(value);
					this.SendPropertyChanging();
					this._Se2 = value;
					this.SendPropertyChanged("Se2");
					this.OnSe2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Se3", DbType="Float")]
		public System.Nullable<double> Se3
		{
			get
			{
				return this._Se3;
			}
			set
			{
				if ((this._Se3 != value))
				{
					this.OnSe3Changing(value);
					this.SendPropertyChanging();
					this._Se3 = value;
					this.SendPropertyChanged("Se3");
					this.OnSe3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H1m", DbType="Float")]
		public System.Nullable<double> H1m
		{
			get
			{
				return this._H1m;
			}
			set
			{
				if ((this._H1m != value))
				{
					this.OnH1mChanging(value);
					this.SendPropertyChanging();
					this._H1m = value;
					this.SendPropertyChanged("H1m");
					this.OnH1mChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H2m", DbType="Float")]
		public System.Nullable<double> H2m
		{
			get
			{
				return this._H2m;
			}
			set
			{
				if ((this._H2m != value))
				{
					this.OnH2mChanging(value);
					this.SendPropertyChanging();
					this._H2m = value;
					this.SendPropertyChanged("H2m");
					this.OnH2mChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H3m", DbType="Float")]
		public System.Nullable<double> H3m
		{
			get
			{
				return this._H3m;
			}
			set
			{
				if ((this._H3m != value))
				{
					this.OnH3mChanging(value);
					this.SendPropertyChanging();
					this._H3m = value;
					this.SendPropertyChanged("H3m");
					this.OnH3mChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H125", DbType="Float")]
		public System.Nullable<double> H125
		{
			get
			{
				return this._H125;
			}
			set
			{
				if ((this._H125 != value))
				{
					this.OnH125Changing(value);
					this.SendPropertyChanging();
					this._H125 = value;
					this.SendPropertyChanged("H125");
					this.OnH125Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H225", DbType="Float")]
		public System.Nullable<double> H225
		{
			get
			{
				return this._H225;
			}
			set
			{
				if ((this._H225 != value))
				{
					this.OnH225Changing(value);
					this.SendPropertyChanging();
					this._H225 = value;
					this.SendPropertyChanged("H225");
					this.OnH225Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H325", DbType="Float")]
		public System.Nullable<double> H325
		{
			get
			{
				return this._H325;
			}
			set
			{
				if ((this._H325 != value))
				{
					this.OnH325Changing(value);
					this.SendPropertyChanging();
					this._H325 = value;
					this.SendPropertyChanged("H325");
					this.OnH325Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H175", DbType="Float")]
		public System.Nullable<double> H175
		{
			get
			{
				return this._H175;
			}
			set
			{
				if ((this._H175 != value))
				{
					this.OnH175Changing(value);
					this.SendPropertyChanging();
					this._H175 = value;
					this.SendPropertyChanged("H175");
					this.OnH175Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H275", DbType="Float")]
		public System.Nullable<double> H275
		{
			get
			{
				return this._H275;
			}
			set
			{
				if ((this._H275 != value))
				{
					this.OnH275Changing(value);
					this.SendPropertyChanging();
					this._H275 = value;
					this.SendPropertyChanged("H275");
					this.OnH275Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H375", DbType="Float")]
		public System.Nullable<double> H375
		{
			get
			{
				return this._H375;
			}
			set
			{
				if ((this._H375 != value))
				{
					this.OnH375Changing(value);
					this.SendPropertyChanging();
					this._H375 = value;
					this.SendPropertyChanged("H375");
					this.OnH375Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C", DbType="Float")]
		public System.Nullable<double> C
		{
			get
			{
				return this._C;
			}
			set
			{
				if ((this._C != value))
				{
					this.OnCChanging(value);
					this.SendPropertyChanging();
					this._C = value;
					this.SendPropertyChanged("C");
					this.OnCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fr", DbType="Float")]
		public System.Nullable<double> Fr
		{
			get
			{
				return this._Fr;
			}
			set
			{
				if ((this._Fr != value))
				{
					this.OnFrChanging(value);
					this.SendPropertyChanging();
					this._Fr = value;
					this.SendPropertyChanged("Fr");
					this.OnFrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Matten_Zug", Storage="_Matten", ThisKey="Id_Matten", OtherKey="Id", IsForeignKey=true)]
		public Matten Matten
		{
			get
			{
				return this._Matten.Entity;
			}
			set
			{
				Matten previousValue = this._Matten.Entity;
				if (((previousValue != value) 
							|| (this._Matten.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Matten.Entity = null;
						previousValue.Zug.Remove(this);
					}
					this._Matten.Entity = value;
					if ((value != null))
					{
						value.Zug.Add(this);
						this._Id_Matten = value.Id;
					}
					else
					{
						this._Id_Matten = default(Nullable<int>);
					}
					this.SendPropertyChanged("Matten");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
